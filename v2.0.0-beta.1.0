// Created by Steven Marshall
// Created 23/03/2020
// v2.0.0-beta.1.0
// https://github.com/smarshall-rightside/Project_Power/
// Licensed for non-commercial use ONLY
// Do not remove this header

#define PID_ENGINE_LOAD 0x04
#define PID_COOLANT_TEMP 0x05
#define PID_SHORT_TERM_FUEL_TRIM_1 0x06
#define PID_LONG_TERM_FUEL_TRIM_1 0x07
#define PID_SHORT_TERM_FUEL_TRIM_2 0x08
#define PID_LONG_TERM_FUEL_TRIM_2 0x09
#define PID_FUEL_PRESSURE 0x0A
#define PID_INTAKE_MAP 0x0B
#define PID_ENGINE_RPM  0x0C
#define PID_VEHICLE_SPEED 0x0D
#define PID_TIMING_ADVANCE 0x0E
#define PID_INTAKE_TEMP 0x0F
#define PID_MAF_FLOW 0x10
#define PID_THROTTLE 0x11
#define PID_AUX_INPUT 0x1E
#define PID_RUNTIME 0x1F
#define PID_DISTANCE_WITH_MIL 0x21
#define PID_COMMANDED_EGR 0x2C
#define PID_EGR_ERROR 0x2D
#define PID_COMMANDED_EVAPORATIVE_PURGE 0x2E
#define PID_FUEL_LEVEL 0x2F
#define PID_WARMS_UPS 0x30
#define PID_DISTANCE 0x31
#define PID_EVAP_SYS_VAPOR_PRESSURE 0x32
#define PID_BAROMETRIC 0x33
#define PID_CATALYST_TEMP_B1S1 0x3C
#define PID_CATALYST_TEMP_B2S1 0x3D
#define PID_CATALYST_TEMP_B1S2 0x3E
#define PID_CATALYST_TEMP_B2S2 0x3F
#define PID_CONTROL_MODULE_VOLTAGE 0x42
#define PID_ABSOLUTE_ENGINE_LOAD 0x43
#define PID_AIR_FUEL_EQUIV_RATIO 0x44
#define PID_RELATIVE_THROTTLE_POS 0x45
#define PID_AMBIENT_TEMP 0x46
#define PID_ABSOLUTE_THROTTLE_POS_B 0x47
#define PID_ABSOLUTE_THROTTLE_POS_C 0x48
#define PID_ACC_PEDAL_POS_D 0x49
#define PID_ACC_PEDAL_POS_E 0x4A
#define PID_ACC_PEDAL_POS_F 0x4B
#define PID_COMMANDED_THROTTLE_ACTUATOR 0x4C
#define PID_TIME_WITH_MIL 0x4D
#define PID_TIME_SINCE_CODES_CLEARED 0x4E
#define PID_ETHANOL_FUEL 0x52
#define PID_FUEL_RAIL_PRESSURE 0x59
#define PID_HYBRID_BATTERY_PERCENTAGE 0x5B
#define PID_ENGINE_OIL_TEMP 0x5C
#define PID_FUEL_INJECTION_TIMING 0x5D
#define PID_ENGINE_FUEL_RATE 0x5E
#define PID_ENGINE_TORQUE_DEMANDED 0x61
#define PID_ENGINE_TORQUE_PERCENTAGE 0x62
#define PID_ENGINE_REF_TORQUE 0x63
//----------------------------------------------

#define CAN_ID_PID 0x7DF //OBD-II CAN frame ID

#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <ezButton.h>
#include <Wire.h>
#include <mcp_can.h>
#include <Adafruit_BMP085.h>
#define CAN0_INT 2                              // Set INT to pin 2  <--------- CHANGE if using different pin number
MCP_CAN CAN0(53);                               // Set CS to pin 10 <--------- CHANGE if using different pin number
ezButton button(7);

U8G2_SH1106_128X64_NONAME_1_HW_I2C u8g2(U8G2_R2);

unsigned long startMillis;
unsigned long currentMillis;
unsigned long time_passed;
unsigned long lastReset;
long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];
char msgString[128];

// Array to store serial string

const unsigned long period = 25;

const int sensorHistoryLength = 128;
int sensorHistory[sensorHistoryLength];
int sensorHistoryPos = sensorHistoryLength - 1;
int boostPressure;
int boostMax = 0; //was 2175
int BoostMaxTop = 0;
int boostMin = 0;
int mapPressure  = 0;
float inbar;
float maxinbar;
uint8_t oiltemp = 0;
uint8_t coolanttemp = 0;
uint8_t egt1temp = 0;
uint8_t egt2temp = 0;
uint8_t enginerpm = 0;



int page = 0;
Adafruit_BMP085 bmp;


void setup(void) {
  Serial.begin(9600);
  u8g2.begin();
  startMillis = millis();
  time_passed = millis();
  
  // Initialize MCP2515 running at 8MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) { //< -------- - CHANGE if using different board
    Serial.println("MCP2515 Initialized Successfully!");
  }
  else {
    Serial.println("Error Initializing MCP2515...");
    while (1);
  }
  if (!bmp.begin()) {
  Serial.println("Could not find a valid BMP085 sensor, check wiring!");
  while (1) {}
  }

  //initialise mask and filter to allow only receipt of 0x7xx CAN IDs
  CAN0.init_Mask(0, 0, 0x07000000);              // Init first mask...
  CAN0.init_Mask(1, 0, 0x07000000);              // Init second mask...


  for (uint8_t i = 0; i < 6; ++i) {
    CAN0.init_Filt(i, 0, 0x07000000);           //Init filters
  }

  CAN0.setMode(MCP_NORMAL);                     // Set operation mode to normal so the MCP2515 sends acks to received data.

  pinMode(CAN0_INT, INPUT);                    // Configuring pin for /INT input
}


void loop(void) {
  button.loop();
  
  if (button.isPressed()) {
      page = (page + 1) % 5;
  }

  // Only read from the sensors every 50 ms
  currentMillis = millis();
  if (currentMillis - startMillis >= period) {
    readSensorData();
    startMillis = currentMillis;
    // Set Max Boost Value
    if (boostPressure >= BoostMaxTop)
    {
      BoostMaxTop = boostPressure;
    }
    else if (boostPressure <  BoostMaxTop)
    {
      if (millis() - lastReset > 5000) {
        lastReset += 5000;
        time_passed = 0;
        BoostMaxTop = boostPressure;
      }
    }
  }

  u8g2.firstPage();
  do {
    if (page == 0) {
      displayPage1();   //Your default page
    }
    else if (page == 1) {
      displayPage2();
    }
    else if (page == 2) {
      displayPage3();
    }
    else if (page == 3) {
      displayPage4();
    }
    else if (page == 4) {
      displayPage5();
    }

  } while ( u8g2.nextPage() );
}

void displayPage1() {



  // Draw current pressure
  u8g2.setFont(u8g2_font_fub20_tf);

  //Set to 0 if its within a small range to avoid flickering of 0.1 bar
  if (boostPressure < 0 && boostPressure > -200)
  {
    boostPressure = 0;
  }

  // Change PSI to BAR
  inbar = boostPressure / 100;
  char cstd[6];
  dtostrf((float)inbar / 14.504, 1, 1, cstd);
  u8g2.drawStr(0, 20, cstd);


  // Draw boost text
  // If statment fixes Bug #1
  if (boostPressure >= -140)
  {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.drawStr(40, 20, "BOOST");
  }
  else if (boostPressure < -140)
  {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.drawStr(50, 20, "VAC");
  }
  // Draw boost text
  if (boostPressure >= 2175)
  {
    u8g2.setFont(u8g2_font_fub11_tf);
    u8g2.drawStr(40, 10, "MAX");
  }
  else if (boostPressure < 2175)
  {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.drawStr(40, 10, "");
  }

  // Draw max pressure
  u8g2.setFont(u8g2_font_fub11_tf);
  // Change PSI to BAR
  maxinbar = BoostMaxTop / 100;
  char csta[6];
  dtostrf((float)maxinbar / 14.504, 1, 1, csta);

  int yPos = u8g2.getStrWidth(csta);
  u8g2.drawStr(128 - yPos, 11, csta);

  drawBarGraph(0, 22, 128, 8);
  drawGraph(0, 32, 128, 31);
}

void displayPage2() {
  
  currentMillis = millis();
  if (currentMillis - startMillis >= period) {
    sendPID(PID_COOLANT_TEMP);
    receivePID(PID_COOLANT_TEMP);
    startMillis = currentMillis;
  }
  

  //sendPID(PID_ENGINE_OIL_TEMP);
  //receivePID(PID_ENGINE_OIL_TEMP);
  //oiltemp = 56; //Emulatiing CAN oil temp


  char cstm[4];
  dtostrf((float)oiltemp, 1, 1, cstm);

  char cstn[4];
  dtostrf((float)coolanttemp, 1, 1, cstn);
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(50, 10, "Oil Temp");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(43, 25, cstm); //°C
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(78, 25, "°C"); 
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(30, 40, "Coolant Temp");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(40, 55, cstn); //°C
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(78, 55, "°C"); 
}

void displayPage3() {
  currentMillis = millis();
  if (currentMillis - startMillis >= period) {
    sendPID(PID_ENGINE_RPM);
    receivePID(PID_ENGINE_RPM);
    startMillis = currentMillis;
  }
 
  char cstm[4];
  dtostrf((float)enginerpm, 1, 1, cstm);

  char cstn[4];
  dtostrf((float)egt2temp, 1, 1, cstn);
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(50, 10, "RPM");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(43, 25, cstm); 
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(30, 40, "EGT 2 Temp");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(40, 55, "92.0"); //°C
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(78, 55, "°C"); 
}

void displayPage4() {
currentMillis = millis();
  if (currentMillis - startMillis >= period) {
    sendPID(PID_CATALYST_TEMP_B1S1);
    receivePID(PID_CATALYST_TEMP_B1S1);
    startMillis = currentMillis;
  }


  char cstm[4];
  dtostrf((float)egt1temp, 1, 1, cstm);

  char cstn[4];
  dtostrf((float)egt2temp, 1, 1, cstn);
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(50, 10, "EGT 1 Temp");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(43, 25, cstm); //°C
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(78, 25, "°C"); 
  
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.drawStr(30, 40, "EGT 2 Temp");
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(40, 55, "0.0"); //°C
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawUTF8(78, 55, "°C"); 
}

void displayPage5() {
  u8g2.setFont(u8g2_font_fub11_tf);
  u8g2.drawStr(40, 20, "Page 5");
}


void readSensorData(void) {
    
  sendPID(PID_INTAKE_MAP);
  receivePID(PID_INTAKE_MAP);

  //mapPressure = 140; //Emulatiing CAN Pressure result in pascal

  // Read Atmosthperic pressure with BMP180
  int AbsaloutePressure;
  AbsaloutePressure = bmp.readPressure() / 6895 ; //Pa into  psi
  AbsaloutePressure = AbsaloutePressure * 100; //psi adding decimal points


  // Read MAP Pressure
  int mapinpsi; 
  mapinpsi = mapPressure / 6.895; //Kpa into  psi
  mapinpsi = mapinpsi * 100; //psi adding decimal points

  //Get boost pressure from above values
  boostPressure = mapinpsi - AbsaloutePressure;
 

  // Update max and min
  if (boostPressure > boostMax) boostMax = boostPressure;
  if (boostPressure < boostMin) boostMin = boostPressure;
  
  // Log the history
  addSensorHistory(boostPressure);
}

void addSensorHistory(int val) {
  sensorHistory[sensorHistoryPos] = val;
  sensorHistoryPos--;
  if (sensorHistoryPos < 0) sensorHistoryPos = sensorHistoryLength - 1;
}

int getSensorHistory(int index) {
  index += sensorHistoryPos;
  if (index >= sensorHistoryLength) index = index - sensorHistoryLength;
  return sensorHistory[index];
}

// Display functions
void drawGraph(int x, int y, int len, int height) {
  // Draw the lines
  drawHorizontalDottedLine(x, y, len);
  drawHorizontalDottedLine(x, y + height, len);

  //var absMin = Math.abs(boostMin);
  int absMin = abs(boostMin);
  int range = absMin + boostMax;

  // Draw 0 line
  int zeroYPos = mapValueToYPos(absMin, range, y, height);
  drawHorizontalDottedLine(x, zeroYPos, len);

  // Draw the graph line
  for (int i = 0; i < 128; i++) {
    // Scale the values so that the min is always 0
    int valueY = getSensorHistory(i) + absMin;

    // Calculate the coordinants
    int yPos = mapValueToYPos(valueY, range, y, height);
    int xPos = len - i;
    if (yPos < zeroYPos) {
      // Point is above zero line, fill in space under graph
      u8g2.drawVLine(xPos, yPos, zeroYPos + 1 - yPos);
    } else {
      // Point is below zero line, draw graph line without filling in
      u8g2.drawPixel(xPos, yPos);
    }
  }
}

void drawBarGraph(int x, int y, int len, int height) {
  if (boostPressure > 0) {
    // Draw the pressure bar behind the graph
    int barLength = ((float)boostPressure / boostMax) * len;
    u8g2.setDrawColor(2);
    u8g2.drawBox(x, y, barLength, height);
    u8g2.setDrawColor(1);
  }
}

// Maps a value to a y height
int mapValueToYPos(int val, int range, int y, int height) {
  float valueY = ((float)val / range) * height;
  return y + height - (int)valueY;
}

void drawHorizontalDottedLine(int x, int y, int len) {
  for (int i = 0; i < len; i++) {
    if (!(i % 4)) u8g2.drawPixel(x + i, y);
  }
}

void receivePID(unsigned char __pid)
{
  if (!digitalRead(CAN0_INT)) {                      // If CAN0_INT pin is low, read receive buffer
    CAN0.readMsgBuf(&rxId, &len, rxBuf);      // Read data: len = data length, buf = data byte(s)

    sprintf(msgString, "Standard ID: 0x%.3lX, DLC: %1d, Data: ", rxId, len);
    Serial.print(msgString);

    for (byte i = 0; i < len; i++) {
      sprintf(msgString, " 0x%.2X", rxBuf[i]);
      Serial.print(msgString);
    }


    switch (__pid) {
      case PID_COOLANT_TEMP:
        if (rxBuf[2] == PID_COOLANT_TEMP) {
          uint8_t temp;
          coolanttemp = rxBuf[3] - 40;
        }
        break;

        
        case PID_CATALYST_TEMP_B1S1:
        if (rxBuf[2] == PID_CATALYST_TEMP_B1S1) {
          egt1temp = ((rxBuf[3] * 256) + rxBuf[4]) / 10 - 40 ;
          
        }
        break;

      case PID_ENGINE_RPM:
        if (rxBuf[2] == PID_ENGINE_RPM) {
          enginerpm = ((rxBuf[3] * 256) + rxBuf[4]) / 4;
        }
        break;

      case PID_INTAKE_MAP:
        if (rxBuf[2] == PID_INTAKE_MAP) {
          uint8_t pressure;
          pressure = rxBuf[3];
          mapPressure = pressure; //in kpasc
          //Serial.print("MAP Pressure: ");
          //Serial.print(mapPressure);
          //Serial.println(" Kpa");
        }
        break;

      case PID_ENGINE_OIL_TEMP:
        if (rxBuf[2] == PID_ENGINE_OIL_TEMP) {
          uint8_t temp;
          oiltemp = rxBuf[3] - 40;
        }
        break;
    }
  }
}

void sendPID(unsigned char __pid)
{
  unsigned char tmp[8] = {0x02, 0x01, __pid, 0, 0, 0, 0, 0};

  byte sndStat = CAN0.sendMsgBuf(CAN_ID_PID, 0, 8, tmp);

  if (sndStat == CAN_OK) {
  }
  else {
    Serial.println("Error Sending Message...");
    delay(1000);
  }
}
